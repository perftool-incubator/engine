#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash
exec 2>&1
test -e /etc/profile && . /etc/profile

# Depending on how client-server-script is started, "/usr/local/bin" is not
# always in the $PATH
PATH="/usr/local/bin:$PATH"
roadblock_bin="/usr/local/bin/roadblock.py"
use_roadblock=1
rb_exit_success=0
rb_exit_timeout=3
rb_exit_abort=4
rb_exit_input=2
runtime_padding=180
abort=0


# Exits without sending any roadblock message
function exit_error() {
    local msg=$1; shift
    local sync=$1; shift
    local leader=$1; shift
    echo -e "[ERROR]client-server-script: $msg\n"
    echo "Exiting"
    exit 1
}

# Sends abort message on roadblock but does not exit
function abort_error() {
    local msg=$1; shift
    local sync=$1; shift
    local leader=$1; shift
    echo -e "[ERROR]client-server-script: $msg\n"
    local msg_file=error.json
    echo '[{"recipient":{"type":"all","id":"all"},"user-object":{"error":"'$msg'"}}]' >$msg_file
    do_roadblock $sync $leader 90 "--abort --user-message $msg_file"
    abort=1
}

function do_roadblock() {
    local label=$1; shift
    local leader=$1; shift
    local timeout=$1; shift
    local extra=$1; shift
    if [ -z "$label" ]; then
        exit_error "[ERROR]do_roadblock() label not provided"
    fi
    if [ -z "$timeout" ]; then
        exit_error "[ERROR]do_roadblock() timeout not provided"
    fi
    local msgs_file="$roadblock_msgs_dir/$label.json"
    local cmd=""
    local role="follower"
    ping -c 4 $rickshaw_host || exit_error "Could not ping controller"
    cmd="$cmd $roadblock_bin --role=follower --redis-server=$rickshaw_host"
    cmd="$cmd --leader-id=$leader --timeout=$timeout --redis-password=$roadblock_passwd"
    cmd="$cmd --follower-id=$cs_label --message-log=$msgs_file $extra"
    local uuid="$roadblock_id:$label"
    printf "\n\n"
    echo "Starting roadblock [`date`]"
    echo "server: $rickshaw_host"
    echo "role: $role"
    echo "uuid (without attempt ID embedded): $uuid"
    echo "timeout: $timeout"

    local attempts=0
    local rc=99
    if [ "$use_roadblock" == "1" ]; then
        while [ $attempts -lt $max_rb_attempts -a $rc -ne $rb_exit_success -a $rc -ne $rb_exit_abort ]; do
            let attempts=$attempts+1
            echo "attempt number: $attempts"
            echo "uuid: $attempts:$uuid"
            local rb_cmd="$cmd --uuid=$attempts:$uuid"
            echo "going to run this roadblock command: ${rb_cmd}"
            echo "roadblock output BEGIN"
            ${rb_cmd}
            rc=$?
            echo "roadblock output END"
            echo "roadblock exit code: $rc"
            if [ -f ${msgs_file} ]; then
                echo "messages from roadblock:"
                cat ${msgs_file}
            fi
        done

        echo "total attempts: $attempts"
        echo "Completed roadblock [`date`]"
        printf "\n\n"

    else
        echo "since use_roadblock = 0, not using roadblock"
        return 0
    fi

    if [ $rc -eq $rb_exit_success -o $rc -eq $rb_exit_abort ]; then
        echo "returning $rc"
        return $rc
    else
        exit_error "roadblocked exited with an error: rc=$rc"
    fi
}

function archive_to_controller() {
    local ssh_id_file=$1; shift
    local src=$1; shift # a directory to archive from
    local dest=$1; shift # a destination directory to write archive
    local ssh_attempts=1
    local ssh_rc=1
    local max_attempts=10
    if [ -z "$ssh_id_file" ]; then
        exit_error "archive_to_controller(): ssh_id_file not defined"
    fi
    if [ -z "$src" ]; then
        exit_error "archive_to_controller(): src_file not defined"
    fi
    if [ -z "$dest" ]; then
        exit_error "archive_to_controller(): destination is not defined"
    fi
    pushd $src || exit_error "Could not chdir to $src"
    while [ $ssh_rc -gt 0 -a $ssh_attempts -lt $max_attempts ]; do
        echo "Trying to tar/ssh fron $src to $rickshaw_host:$dest"
        tar czf - . | ssh \
                       -o StrictHostKeyChecking=no \
                       -o ConnectionAttempts=10 \
                       -i "/tmp/rickshaw_id.rsa" \
                       $rickshaw_host "dd of=$dest"
        ssh_rc=$?
        echo "ssh exit code: $ssh_rc"
        if [ $ssh_rc -gt 0 ]; then
            echo "tar/ssh failed, trying again"
            sleep $ssh_attempts
        fi
        let ssh_attempts=$ssh_attempts+1
    done
    popd >/dev/null
    if [ $ssh_attempts -ge $max_attempts ]; then
        exit_error "Could not archive $src to $rickshaw_host:$dest"
    fi
}

echo "client-server-script env:"
env
echo "client-server-script params:"
echo "$@"
echo
echo os-release:
cat /etc/os-release
echo
echo "uname:"
uname -a
echo
version=20200509
echo "version: $version"
echo

function process_opts() {
    longopts="rickshaw-host:,base-run-dir:,endpoint-run-dir:,cs-label:,roadblock-server:"
    longopts+=",roadblock-passwd:,roadblock-id:,disable-tools:,endpoint:,osruntime:,max-sample-failures:"
    longopts+=",max-rb-attempts:"
    longopts+=",client-server-script-start-timeout:,client-server-script-stop-timeout:,client-server-send-data-timeout:"
    longopts+=",default-timeout:,endpoint-deploy-timeout:,endpoint-move-data-timeout:"
    opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
    eval set -- "$opts";
    while true; do
        case "$1" in
            --osruntime)
                shift;
                osruntime="$1"
                shift;
                ;;
            --endpoint)
                shift;
                endpoint="$1"
                shift;
                ;;
            --rickshaw-host)
                shift;
                rickshaw_host="$1"
                shift;
                ;;
            --base-run-dir)
                shift;
                base_run_dir=$1
                shift;
                ;;
            --cs-label)
                shift;
                cs_label="$1"
                shift;
                ;;
            --endpoint-run-dir)
                shift;
                endpoint_run_dir="$1"
                shift;
                ;;
            --roadblock-passwd)
                shift;
                roadblock_passwd="$1"
                shift;
                ;;
            --roadblock-id)
                shift;
                roadblock_id="$1"
                shift;
                ;;
            --disable-tools)
                shift;
                disable_tools="$1"
                shift;
                ;;
            --max-sample-failures)
                shift;
                max_sample_failures="$1"
                shift;
                ;;
            --max-rb-attempts)
                shift;
                max_rb_attempts="$1"
                shift;
                ;;
            --default-timeout)
                shift;
                default_timeout="$1"
                echo "setting default_timeout to $default_timeout"
                shift;
                ;;
            --client-server-script-stop-timeout)
                shift;
                client_server_script_stop_timeout="$1"
                echo "setting client_server_script_stop_timeout to $client_server_script_stop_timeout"
                shift;
                ;;
            --client-server-script-start-timeout)
                shift;
                client_server_script_start_timeout="$1"
                echo "setting client_server_script_start_timeout to $client_server_script_start_timeout"
                shift;
                ;;
            --client-server-send-data-timeout)
                shift;
                client_server_send_data_timeout="$1"
                echo "setting client_server_send_data_timeout to $client_server_send_data_timeout"
                shift;
                ;;
            --)
                shift;
                break;
            ;;
            *)
            exit_error "Unexpected argument [$1]" endpoint-deploy
            shift;
            break;
            ;;
        esac
    done
    if [ -z "$default_timeout" ]; then
        default_timeout=1200
    elif [ -z "$client_server_script_start_timeout" ]; then
        client_server_script_start_timeout=1200
    elif [ -z "$client_server_script_stop_timeout" ]; then
        client_server_script_stop_timeout=1200
    elif [ -z "$client_server_send_data_timeout" ]; then
        client_server_send_data_timeout=7200
    fi
}

function validate_core_env() {
    echo
    echo "core environment:"
    if [ -z "$rickshaw_host" ]; then
	exit_error "Exiting due to rickshaw host not being set"
    else
	echo "rickshaw_host=${rickshaw_host}"
    fi
    if [ -z "$roadblock_id" ]; then
        echo "Cannot use roadblock for synchronizaton because an ID was not provided"
        use_roadblock=0
    fi
    if [ -z "$roadblock_passwd" ]; then
        echo "Cannot use roadblock for synchronizaton because a password was not provided"
        use_roadblock=0
    fi
    echo "use_roadblock=${use_roadblock}"
    if [ "$use_roadblock" == "1" ]; then
        if [ ! -e $roadblock_bin ]; then
            exit_error "Could not find roadblock binary: $roadblock_bin"
        fi
    fi
    if [ -z "$cs_label" ]; then
        exit_error "The client/server label (--cs-label) was not defined"
    fi
    if echo $cs_label | grep -q -P '^(\w+)-\d+$'; then
        echo "client-server-label \"$cs_label\" is valid"
    else
        exit_error 'cs_label "'$cs_label'" does not adhere to regex /^(\w+)-\d+$/'
    fi

    if [ -z "${max_rb_attempts}" ]; then
	max_rb_attempts=1
	echo "[WARNING] --max-rb-attempts was not used, so setting to default of $max_rb_attempts"
    else
	echo "max_rb_attempts=${max_rb_attempts}"
    fi
    if [ -z "$max_sample_failures" ]; then
        max_sample_failures=3
        echo "[WARNING] --max-sample-failures was not used, so seeting to default of $max_sample_failures"
    else
	echo "max_sample_failures=${max_sample_failures}"
    fi
    if [ -z "$endpoint_run_dir" ]; then
        exit_error "The endpoint run directory (--endpoint-run-dir) was not defined"
    else
	echo "endpoint_run_dir=${endpoint_run_dir}"
    fi
    echo
    echo "client_server_script_start_timeout: $client_server_script_start_timeout"
}

function setup_core_env() {
    export RS_CS_LABEL=$cs_label
    cs_type=`echo $cs_label | awk -F- '{print $1}'`
    cs_id=`echo $cs_label | awk -F- '{print $2}'`

    # Directories on the client/server
    cs_dir="`mktemp -d`"
    echo "cs_dir: $cs_dir"
    tool_start_cmds="$cs_dir/tool-start"
    tool_stop_cmds="$cs_dir/tool-stop"
    roadblock_msgs_dir="$cs_dir/roadblock-msgs"
    mkdir -p "$roadblock_msgs_dir"
    sysinfo_dir="$cs_dir/sysinfo"
    mkdir -p "$sysinfo_dir"

    # Directories on the controller
    config_dir="$base_run_dir/config"
    client_server_config_dir="$config_dir/client-server"
    tool_cmds_dir="$config_dir/tool-cmds/$cs_type"
    tool_cmds_dir="$config_dir/tool-cmds/$cs_type"
    run_dir="$base_run_dir/run"
    archives_dir="$run_dir/client-server/archives"
    sync_prefix=client-server
    sync=$sync_prefix-script-start
}

function get_data() {
    # Get files required to run benchmark and tools
    cs_files_list="$cs_type-files-list"
    # First get the file that tells us what other files to get
    scp_from_controller "$ssh_id_file" "$client_server_config_dir/$cs_files_list" "$cs_files_list"
    if [ ! -e "$cs_files_list" ]; then
        abort_error "Could not find $cs_files_list" $sync $leader
    fi
    dest_file=""
    src_file=""
    # Now we know what files to get
    while read -u 9 line; do
        # $cs_files_list has line like:
        # src=<file>
        # dest=<file>
        # (then repeat)
        if [ -z "$src_file" ]; then
            src_file=`echo $line | grep "^src=" | awk -F= '{print $2}'`
            if [ -z "$src_file" ]; then
                abort_error "source file not found in $cs_type-file-list" $sync $leader
            fi
        else
            dest_file=`echo $line | grep "^dest=" | awk -F= '{print $2}'`
            if [ -z "$dest_file" ]; then
                abort_error "dest file not found in $cs_type-file-list" $sync $leader
            fi
            scp_from_controller "$ssh_id_file" "$src_file" "$dest_file"
            dest_file=""
            src_file=""
        fi
    done 9< "$cs_files_list"

    # Get the benchmark and tool commands
    cs_start_bench_cmds="$cs_label-start-bench.cmds"
    # Everyone gets the bench-start-cmds (the client's start cmds) because that tells everyone how many tests there are
    if [ "$cs_type" == "client" -o "$cs_type" == "server" ]; then
        scp_from_controller "$ssh_id_file" "$client_server_config_dir/bench-cmds/$cs_type/$cs_id/start" "bench-start-cmds"
    else
        # All tool-only osruntimes just copy from client-1
        scp_from_controller "$ssh_id_file" "$client_server_config_dir/bench-cmds/client/1/start" "bench-start-cmds"
    fi
    if [ ! -e "bench-start-cmds" ]; then
        abort_error "bench cmds file bench-start-cmds not found. PWD: `/bin/pwd`  LS: `/bin/ls`" $sync $leader
    fi
    if [ "$cs_type" == "client" -o "$cs_type" == "server" ]; then
        if [ "$cs_type" == "client" ]; then
            scp_from_controller "$ssh_id_file" "$client_server_config_dir/bench-cmds/$cs_type/$cs_id/infra" "bench-infra-cmds"
            if [ "$cs_id" == "1" ]; then
                scp_from_controller "$ssh_id_file" "$client_server_config_dir/bench-cmds/$cs_type/$cs_id/runtime" "bench-runtime-cmds"
            fi
        fi
        if [ "$cs_type" == "server" ]; then
            scp_from_controller "$ssh_id_file" "$client_server_config_dir/bench-cmds/$cs_type/$cs_id/stop" "bench-stop-cmds"
            if [ ! -e "bench-stop-cmds" ]; then
                abort_error "bench cmds file bench-stop-cmds not found. PWD: `/bin/pwd`  LS: `/bin/ls`" $sync $leader
            fi
        fi
        scp_from_controller "$ssh_id_file" "$tool_cmds_dir/$cs_id/start" "$tool_start_cmds"
        scp_from_controller "$ssh_id_file" "$tool_cmds_dir/$cs_id/stop" "$tool_stop_cmds"
    else
        # non-client/server get tool cmds based on endpoint-specific collector = $cs_label like "worker"
        scp_from_controller "$ssh_id_file" "$tool_cmds_dir/start" "$tool_start_cmds"
        scp_from_controller "$ssh_id_file" "$tool_cmds_dir/stop" "$tool_stop_cmds"
    fi
}

function collect_sysinfo() {
    echo
    echo "Collecting sysinfo"

    packrat_bin=$(command -v packrat)
    if [ ! -z "${packrat_bin}" ]; then
        echo "Running packrat..."
        ${packrat_bin} ${sysinfo_dir}
        echo "Packrat is finished"
    else
        echo "Packrat is not available"
    fi

    echo "Contents of ${sysinfo_dir}:"
    ls -l ${sysinfo_dir}

    echo
}

function start_tools() {
    for this_tool_cmds in "$tool_start_cmds" "$tool_stop_cmds"; do
        if [ ! -e $this_tool_cmds ]; then
            abort_error "Tool cmd file $this_tool_cmd was not found" $sync $leader
        fi
    done
    mkdir -p tool-data
    if [ "$disable_tools" == "1" ]; then
        echo "Not running tools because --disable-tools=1 was used"
    else
        if pushd tool-data >/dev/null; then
            while read -u 9 line; do
                tool_name=`echo $line | awk -F: '{print $1}'`
                tool_cmd=`echo $line | sed -e s/^$tool_name://`
                /bin/mkdir -p $tool_name
                if pushd $tool_name >/dev/null; then
                    eval $tool_cmd
                    popd >/dev/null
                else
                    abort_error "start_tools: Failed to pushd to ${tool_name}" $sync $leader
                fi
            done 9<"$tool_start_cmds"
            popd >/dev/null
        else
            abort_error "start_tools: Failed to pushd to tool-data" $sync $leader
        fi
    fi
}

function run_tests() {
    # Take the files generated by rickshaw controller
    # that includes all of the benchmark commands
    # and put them in an array to later use.  At a
    # minimum, all clients and servers need a start
    # command, and all servers need a stop command
    echo "Starting run_tests()"
    declare -A bench_runtime_cmds
    declare -A bench_infra_cmds
    declare -A bench_start_cmds
    declare -A bench_stop_cmds
    echo "Processing bench cmds"
    local count=0
    if [ -e bench-start-cmds ]; then
        while read -u 9 line; do
            bench_start_cmds[$count]="$line"
            let count=$count+1
        done 9< bench-start-cmds
    else
        abort_error "bench-start-cmds not found" $sync $leader
    fi
    if [ "$cs_type" == "client" -o "$cs_type" == "server" ]; then
        # Only the clients need a runtime and infra cmd
        if [ "$cs_type" == "client" ]; then
            count=0
            # Only generate runtime cmds for first client
            # as we assume all clients have the same runtime
            if [ -e bench-runtime-cmds -a "$cs_id" == 1 ]; then
                echo "Loading bench runtime cmds"
                while read -u 9 line; do
                    bench_runtime_cmds[$count]="$line"
                    let count=$count+1
                done 9< bench-runtime-cmds
            fi
            count=0
            # Infra cmds are for clients that want/need
            # to do some work before the server starts
            if [ -e bench-infra-cmds ]; then
                echo "Loading bench infra cmds"
                while read -u 9 line; do
                    bench_infra_cmds[$count]="$line"
                    let count=$count+1
                done 9< bench-infra-cmds
            fi
        # Only the server needs a cmd to stop
        # Clients run until the benchmark-client
        # program finishes
        elif [ "$cs_type" == "server" ]; then
            if [ -e bench-stop-cmds ]; then
                echo "Loading bench server cmds"
                count=0
                while read -u 9 line; do
                    bench_stop_cmds[$count]="$line"
                    let count=$count+1
                done 9< bench-stop-cmds
            else
                abort_error "bench-stop-cmds not found" $sync $leader
            fi
        fi
    fi

    # Run the actual tests by processing the commands array
    local abort_opt=""
    echo "Going to process test roadblocks and bench cmds (if applicable)"
    abort_run_on_iter_fail=0
    local timeout=$default_timeout
    local len=${#bench_start_cmds[@]}
    local quit=0
    for (( i=0; i<$len; i++ )); do
        local iter_samp=`echo ${bench_start_cmds[$i]} | awk '{print $1}'`
        local iter=`echo $iter_samp | awk -F- '{print $1}'`
        let iter_idx=$iter-1
            sample_failures[$iter_idx]=0
    done
    for (( i=0; i<$len; i++ )); do
        if [ $quit -gt 0 ]; then
            echo "quit = 1 so breaking out of tests"
            break
        fi
        local iter_samp=`echo ${bench_start_cmds[$i]} | awk '{print $1}'`
        if [ "$cs_type" == "client" -o "$cs_type" == "server" ]; then
            local start_cmd=`echo ${bench_start_cmds[$i]} | sed -e s/^$iter_samp//`
        fi
        if [ "$cs_type" == "client" ]; then
            local start_cmd=`echo ${bench_start_cmds[$i]} | sed -e s/^$iter_samp//`
            local runtime_cmd=`echo ${bench_runtime_cmds[$i]} | sed -e s/^$iter_samp//`
            local infra_cmd=`echo ${bench_infra_cmds[$i]} | sed -e s/^$iter_samp//`
        elif [ "$cs_type" == "server" ]; then
            stop_cmd=`echo ${bench_stop_cmds[$i]} | sed -e s/^$iter_samp//`
        fi
        local iter=`echo $iter_samp | awk -F- '{print $1}'`
        let iter_idx=$iter-1
        local samp=`echo $iter_samp | awk -F- '{print $2}'`
        local iter_samp_dir="$cs_dir/iteration-$iter/sample-$samp"
        local cs_msgs_dir="$iter_samp_dir/msgs"
        local cs_tx_msgs_dir="$cs_msgs_dir/tx" # Messages a client or server wants to transmit
        local cs_rx_msgs_dir="$cs_msgs_dir/rx" # Messages a client or server has received
        local this_attempt_num=1
        local sample_complete=0
        while [ $sample_complete -eq 0 -a ${sample_failures[$iter_idx]} -lt $max_sample_failures ]; do
            local this_attempt_fail=0
            for this_dir in "$iter_samp_dir" "$cs_msgs_dir" "$cs_tx_msgs_dir" "$cs_rx_msgs_dir"; do
                echo "mkdir -p $this_dir"
                mkdir -p "$this_dir" || exit_error "Could not mkdir $this_dir"
            done
            # The following should be replaced by creating hardlinks in each sample
            # dir for each file in $cs_file_list
            if [ "$cs_type" == "client" -o "$cs_type" == "server" ]; then
                find . -mindepth 1 -maxdepth 1 -type f | grep -v -- "$cs_label-stderrout.txt" | \
                    grep -v -- "$cs_label-bench.cmds" | grep -v -- "$cs_label-tool.cmds" | \
                    grep -v -- "$cs_files_list" | \
                    cpio -pdum iteration-$iter/sample-$samp/ ||
                    exit_error "Could not copy files from $cs_dir to $iter_samp_dir with find & cpio"
            fi
            pushd $iter_samp_dir || exit_error "Could not chdir to $iter_samp_dir"
            echo PWD: `/bin/pwd`
            printf "Sample %d attempt number %d\n" $samp $this_attempt_num
            local syncs=""
            local stop_syncs=""
            abort_opt=""
            for start_stop in "start" "stop"; do
                if [ "$start_stop" == "start" ]; then
                    syncs="infra server endpoint client"
                else
                    syncs="$stop_syncs"
                fi
                for sync in $syncs; do
                    local this_sync="$sync-$start_stop"
                    if [ "$start_stop" == "start" ]; then
                        # Build the syncs needed for stop, may end up being fewer than all syncs if start syncs abort early
                        stop_syncs="$sync $stop_syncs"
                    fi
                    local label="${iter}-${samp}-${this_attempt_num}:$this_sync"
                    local msgs_file="$roadblock_msgs_dir/$label.json"
                    local this_timeout=$default_timeout
                    # Conditional below restricts to first client because we assume the runtime is the same for all clients
                    if [ ! -z "$runtime_cmd" -a "$cs_type" == "client" -a "$this_sync" == "client-start" -a "$cs_id" == "1" -a "$abort_opt" == "" ]; then
                        user_message_opt=""
                        # Get estimated runtime if possible and send to everyone else
                        # The script called must output in stdout the number of seconds the runtime should be
                        echo "going to run this command to get the runtime: $runtime_cmd"
                        runtime=`$runtime_cmd`
                        if [ $? -eq 0  -a ! -z "$runtime" ]; then
                            # Add padding to benchmark runtime to give
                            # enough time for everyone to call roadblock
                            let this_timeout=$runtime+$runtime_padding
                            user_json_file="`mktemp`"
                            # Sending timeout to all participants, to be used for clint-stop roadblock
                            echo "adding timeout message to $cs_tx_msgs_dir"
                            echo '{"recipient":{"type":"all","id":"all"},"user-object":{"timeout":"'$this_timeout'"}}' >"$cs_tx_msgs_dir/timeout"
                        fi
                    fi
                    local pending_tx_msgs="`/bin/ls -1 $cs_tx_msgs_dir`"
                    if [ ! -z "$pending_tx_msgs" -a "$abort_opt" == "" ]; then
                        echo "Found messages in $cs_tx_msgs_dir, preparing them to send"
                        mkdir -p ${cs_tx_msgs_dir}-sent
                        local msgs_json_file="$iter_samp_dir/rb-msgs-$this_sync"
                        echo "[" >"$msgs_json_file"
                        for msg in $pending_tx_msgs; do
                            # TODO validate JSON schema
                            echo "Adding $msg to $msgs_json_file"
                            cat "$cs_tx_msgs_dir/$msg" >>"$msgs_json_file"
                            /bin/mv "$cs_tx_msgs_dir/$msg" "${cs_tx_msgs_dir}-sent"
                            echo "," >>"$msgs_json_file"
                        done
                        echo '{"recipient":{"type":"all","id":"all"},"user-object":{"sync":"'$this_sync'"}}]' >>$msgs_json_file
                        echo "full message to send:"
                        cat "$msgs_json_file"
                        # TODO changing this to $extra_opt everywhere
                        abort_opt=" --user-messages=$msgs_json_file"
                    fi
                    do_roadblock "$label" "controller" $timeout "$abort_opt"
                    local rb_rc=$?
                    local cmd_rc=0
                    abort_opt=""
                    echo roadblock $label exit code: $rb_rc
                    if [ $rb_rc -eq $rb_exit_abort ]; then
                        this_attempt_fail=1
                        let sample_failures[$iter_idx]=${sample_failures[$iter_idx]}+1
                        echo -e "\nReceived abort exit code from iteration $iter, sample $samp roadblock"
                        if [ ${sample_failures[$iter_idx]} -ge $max_sample_failures ]; then
                            sample_complete=1
                            printf "[ERROR]All A maximum of %d failures for iteration %d have been reached, failing this iteration\n" \
                                $max_sample_failures $iter
                        fi
                        if [ $abort_run_on_iter_fail -eq 1 ]; then
                            printf "[ERROR]Since this interation failed, skipping all other tests\n"
                            quit=1
                        fi
                        if [ "$start_stop" == "start" ]; then
                            # There is no reason to continue the rest of the start syncs because of the abort.
                            # Since the list of stop syncs are constructed as start syncs are processed,
                            # only the minimum nummber of stop syncs will be processed.  For example,
                            # if server-start had an abort, only server-stop would be in the list of 
                            # stop-syncs.  Or, if endpoint-start had an abort, both endpiont-stop and
                            # server-stop would be in the list of stop syncs.
                            break
                        fi
                    else
                        # Allow to break out of inner while loop if no aborts all the way to the last sync
                        if [ $this_attempt_fail -eq 0 ]; then
                            if [ "$this_sync" == "server-stop" ]; then
                                sample_complete=1
                                let num_fail=$this_attempt_num-1
                                printf "Sample %d completed successfully with %d failed attempts (%d total sample failures for this iteration)\n" \
                                    $samp $num_fail ${sample_failures[$iter_idx]}
                            fi
                        fi
                    fi
                    if [ $rb_rc -eq 2 ]; then
                        exit_error "roadblock for client-server-start-test:$iter-$samp timed out"
                    fi
                    timeout=$default_timeout
                    if [ -f $msgs_file ]; then
                        local cs_buddy=""
                        local count=1
                        if [ $cs_type == "client" ]; then
                            cs_buddy="server-$cs_id"
                        elif [ $cs_type == "server" ]; then
                            cs_buddy="client-$cs_id"
                        fi
                        echo "Found messages file: $msgs_file"
                        # First look for a message to "all" but sent by client-server buddy
                        # (to be deprecated)
                        if [ "$cs_type" == "client" -o "$cs_type" == "server" ]; then
                            jq -cr '.received[] | select(.payload.sender.id == "'$cs_buddy'" and 
                                    .payload.message.command == "user-object") | .payload.message' $msgs_file\
                            | while read line; do
                                msg="$this_sync:$count"
                                echo "Found user-object message from $cs_buddy: $line"
                                echo "$line" | jq '."user-object"' >"$cs_rx_msgs_dir/$msg"
                                let count=$count+1
                            done
                            # Next look for a message sent specifically to this client/server
                            jq -cr '.received[] | select(.payload.recipient.id == "'$cs_label'" and 
                                    .payload.message.command == "user-object") | .payload.message' $msgs_file\
                            | while read line; do
                                msg="$this_sync:$count"
                                echo "Found user-object message from $cs_buddy: $line"
                                echo "$line" | jq '."user-object"' >"$cs_rx_msgs_dir/$msg"
                                let count=$count+1
                            done
                        fi
                        # TODO: process the newly created msg files above instead of scanning the entire messages array again
                        next_timeout=`jq -r '.received[] | .payload.message."user-object".timeout ' $msgs_file | grep -v null`
                        jq -r '.received[] | .payload.message."user-object".timeout ' $msgs_file
                        if [ ! -z "$next_timeout" ]; then
                            echo "Applying timeout value of $next_timeout to next roadblock sync"
                            timeout=$next_timeout
                        fi
                    fi
                    # These combinations don't run a command:
                    #  sync=infra-start & cs_type=server
                    #  sync=server-start & cs_type=client
                    #  sync=client-start & cs_type=server
                    #  sync=server-stop & cs_type=client
                    #  sync=infra-stop & cs_type=client|server
                    if [ "$this_sync" == "infra-start" -a "$cs_type" == "client" -a ! -z "$infra_cmd" ]; then
                        $infra_cmd
                        cmd_rc=$?
                    elif [ "$this_sync" == "server-start" -a "$cs_type" == "server" ]; then
                        echo "Running $this_sync command: $start_cmd"
                        $start_cmd
                        cmd_rc=$?
                    elif [ "$this_sync" == "client-start" -a "$cs_type" == "client" ]; then
                        echo "Running $this_sync command: $start_cmd"
                        $start_cmd
                        cmd_rc=$?
                    elif [ "$this_sync" == "server-stop" -a "$cs_type" == "server" ]; then
                        echo "Running $this_sync command: $stop_cmd"
                        $stop_cmd
                        cmd_rc=$?
                    fi
                    if [ $cmd_rc -gt 0 ]; then
                        echo -e "\nNon-zero exit code ($cmd_rc) from iteration $iter, sample $samp attempt $this_attempt_num"
                        # An abort message must be sent so the other members know how to procede
                        # Not necessary with server-stop since that is the last sync in this sample
                        if [ "$this_sync" != "server-stop" ]; then
                            abort_opt=" --abort"
                            # Also send any messages. as we expect the benchmark scripts to send
                            # details about why it had a non-zero exit code.
                            pending_tx_msgs="`/bin/ls -1 $cs_tx_msgs_dir`"
                            if [ ! -z "$pending_tx_msgs" ]; then
                                echo "Found messages in $cs_tx_msgs_dir, preparing them to send"
                                mkdir -p ${cs_tx_msgs_dir}-sent
                                msgs_json_file="$iter_samp_dir/rb-msgs-$this_sync"
                                echo "[" >"$msgs_json_file"
                                for msg in $pending_tx_msgs; do
                                    # TODO validate JSON schema
                                    echo "Adding $msg to $msgs_json_file"
                                    cat "$cs_tx_msgs_dir/$msg" >>"$msgs_json_file"
                                    /bin/mv "$cs_tx_msgs_dir/$msg" "${cs_tx_msgs_dir}-sent"
                                    echo "," >>"$msgs_json_file"
                                done
                                echo '{"recipient":{"type":"all","id":"all"},"user-object":{"sync":"'$this_sync'"}}]' >>$msgs_json_file
                                echo "full message to send:"
                                cat "$msgs_json_file"
                                # TODO change this to $extra_opt everywhere
                                abort_opt+=" --user-messages=$msgs_json_file"
                            fi
                            echo -e "\nWill not continue this sample attempt and send abort message on next roadblock\n"
                        fi
                    fi
                done #for syncs
            done #for start/stop
            if [ $this_attempt_fail -eq 1 ]; then
                /bin/mv "$iter_samp_dir" "$iter_samp_dir-fail${sample_failures[$iter_idx]}"
            fi
            let this_attempt_num=$this_attempt_num+1
            popd >/dev/null  # from $iter_sampl_dir back to $cs_dir
        done #while
    done #for all tests
}

function stop_tools() {
    if [ "$disable_tools" == "1" ]; then
        echo "Not running tools because --disable-tools=1 was used"
    else
        if pushd tool-data >/dev/null; then
            while read -u 9 line; do
                tool_name=`echo $line | awk -F: '{print $1}'`
                tool_cmd=`echo $line | sed -e s/^$tool_name://`
                if pushd $tool_name >/dev/null; then
                    eval $tool_cmd
                    popd >/dev/null
                else
                    abort_error "stop_tools: Failed to pushd to ${tool_name}" $sync $leader
                fi
            done 9<"$tool_stop_cmds"
            popd >/dev/null
        else
            abort_error "stop_tools: Failed to pushd to tool-data" $sync $leader
        fi
    fi
}

function send_data() {
    echo -e "\nCopying data back to controller"
    # Send all of the test data to the controller and remove local data
    archive_to_controller "$ssh_id_file" "$cs_dir" "$archives_dir/$cs_label-data.tgz"
}

sync=client-server-script-start
leader=controller
process_opts
validate_core_env
setup_core_env # roadblocks may be used after this
if [ $abort -eq 0 ]; then do_roadblock $sync $leader $client_server_script_start_timeout; fi
if [ $abort -eq 0 -a $? -eq 0 ]; then
    sync=$sync_prefix-get-data
    pushd "$cs_dir" >/dev/null || abort_error "Could not chdir to $cs_dir" $sync $leader
    if [ $abort -eq 0 ]; then do_roadblock $sync $leader $default_timeout; fi
    if [ $abort -eq 0 -a $? -eq 0 ]; then # get-data rb passed
        get_data
        sync=$sync_prefix-collect-sysinfo
        if [ $abort -eq 0 ]; then do_roadblock $sync $leader $default_timeout; fi
        if [ $? -eq 0 -a $abort -eq 0 ]; then # collect-sysinfo rb passed
            collect_sysinfo
            sync=$sync_prefix-start-tools
            if [ $abort -eq 0 ]; then do_roadblock $sync $leader $default_timeout; fi
            if [ $? -eq 0 -a $abort -eq 0 ]; then # start-tools rb passed
                sync=$sync_prefix-start-tests

                #if [ "$cs_label" == "worker-1" ]; then
                    #abort_error "Fault injection from client-1 before $sync" $sync $leader
                #fi
                #echo "finished with fault injection"

                start_tools
                if [ $abort -eq 0 ]; then do_roadblock $sync $leader $default_timeout; fi
                if [ $abort -eq 0 -a $? -eq 0 ]; then # start-tests rb passed
                    run_tests
                fi
                do_roadblock $sync_prefix-stop-tests $leader $default_timeout
                do_roadblock $sync_prefix-stop-tools $leader $default_timeout
                stop_tools
            fi
        fi
        do_roadblock $sync_prefix-send-data $leader $default_timeout
        send_data
    fi
    echo "right before script-stop roadblock"
    do_roadblock $sync_prefix-script-stop $leader $default_timeout
    popd >/dev/null
fi
echo -e "\nAll client/server scripts are finished"
/bin/rm -rf $cs_dir
